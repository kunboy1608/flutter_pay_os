import 'dart:convert';
import 'package:http/http.dart' as http;

import 'pay_os_constants.dart';
import 'pay_os_exception.dart';
import 'pay_os_payment_data.dart';
import 'pay_os_utils.dart';

class PayOsService {
  /// Each payment getaway will have a clientId
  /// You receive it when creating an account PayOs on ![](https://payos.vn/)
  final String clientId;

  /// Each payment getaway will have a apiKey
  /// You receive it when creating an account PayOs on ![](https://payos.vn/)
  final String apiKey;

  /// Represents the checksum key associated with each payment gateway.
  /// You receive this key when creating an account on ![](https://payos.vn/)
  /// If your checksum key is compromised, it's crucial to change it promptly
  /// to prevent hackers from setting up fraudulent servers between user applications and your server.
  final String checksumKey;

  const PayOsService({
    required this.clientId,
    required this.apiKey,
    required this.checksumKey,
  });

  /// Creates a payment link using the provided [paymentData].
  ///
  /// The payment link is generated by making an HTTP POST request to the PayOs API
  /// endpoint at 'https://api-merchant.payos.vn/v2/payment-requests'.
  ///
  /// The [paymentData] should be properly initialized with necessary details,
  /// including the [signature] (calculated using [PayOsUtils.createSignatureOfPaymentRequest])
  /// and other required headers ([x-client-id] and [x-api-key]).
  ///
  /// If the API call is successful (HTTP status code 200), the response data is
  /// validated against its signature. If the signature matches, the payment link
  /// data is returned. Otherwise, an exception is thrown indicating data integrity issues.
  ///
  /// Note: Remember to close the HTTP client after using it.
  ///
  /// Example usage:
  /// ```dart
  /// final paymentData = PayOsPaymentData(/* initialize with necessary data */);
  /// final paymentLink = await createPaymentLink(paymentData);
  /// print('Payment link: $paymentLink');
  /// ```
  Future<Map<String, dynamic>> createPaymentLink(
      PayOsPaymentData paymentData) async {
    final Uri url =
        Uri.parse('https://api-merchant.payos.vn/v2/payment-requests');
    final http.Client client = http.Client();

    try {
      paymentData.signature =
          PayOsUtils.createSignatureOfPaymentRequest(paymentData, checksumKey);

      final Map<String, String> headers = {
        'Accept': 'application/json',
        'Content-type': 'application/json',
        'Charset': 'UTF-8',
        'x-client-id': clientId,
        'x-api-key': apiKey,
      };

      final http.Response response = await client.post(
        url,
        headers: headers,
        body: jsonEncode(paymentData.toMap()),
      );

      if (response.statusCode != 200) {
        throw Exception('Call API failed!');
      } else {
        final Map<String, dynamic> res = jsonDecode(response.body);

        if (res['code'] != '00') {
          throw PayOsException(code: res['code'], message: res['desc']);
        } else {
          final String paymentLinkResSignature =
              PayOsUtils.createSignatureFromObj(res['data'], checksumKey);
          if (paymentLinkResSignature != res['signature']) {
            throw Exception(PayOsConstants.errorMessage['DATA_NOT_INTEGRITY']);
          } else {
            return res['data'];
          }
        }
      }
    } finally {
      client.close();
    }
  }

  /// Retrieves payment link information for the specified [orderId].
  ///
  /// This function makes an HTTP GET request to the PayOs API endpoint at
  /// 'https://api-merchant.payos.vn/v2/payment-requests/{orderId}'.
  ///
  /// The required headers include [x-client-id] and [x-api-key].
  ///
  /// If the API call is successful (HTTP status code 200), the response data is
  /// validated against its signature. If the signature matches, the payment link
  /// data is returned. Otherwise, an exception is thrown indicating data integrity issues.
  ///
  /// Note: Remember to close the HTTP client after using it.
  ///
  /// Example usage:
  /// ```dart
  /// final orderId = 12345; // Replace with the actual order ID
  /// final paymentLinkInfo = await getPaymentLinkInformation(orderId);
  /// print('Payment link info: $paymentLinkInfo');
  /// ```
  Future<Map<String, dynamic>> getPaymentLinkInformation(int orderId) async {
    final Uri url =
        Uri.parse("https://api-merchant.payos.vn/v2/payment-requests/$orderId");
    final http.Client client = http.Client();

    try {
      final Map<String, String> headers = {
        'Accept': 'application/json',
        'Content-type': 'application/json',
        'Charset': 'UTF-8',
        'x-client-id': clientId,
        'x-api-key': apiKey,
      };

      final http.Response response = await client.get(
        url,
        headers: headers,
      );

      if (response.statusCode != 200) {
        throw Exception('Call API failed!');
      } else {
        final Map<String, dynamic> res = jsonDecode(response.body);

        if (res['code'] != '00') {
          throw PayOsException(code: res['code'], message: res['desc']);
        } else {
          final String paymentLinkResSignature =
              PayOsUtils.createSignatureFromObj(res['data'], checksumKey);
          if (paymentLinkResSignature != res['signature']) {
            throw Exception(PayOsConstants.errorMessage['DATA_NOT_INTEGRITY']);
          } else {
            return res['data'];
          }
        }
      }
    } finally {
      client.close();
    }
  }

  /// Cancels a payment link associated with the specified [orderId].
  ///
  /// This function makes an HTTP POST request to the PayOs API endpoint at
  /// 'https://api-merchant.payos.vn/v2/payment-requests/{orderId}/cancel'.
  ///
  /// The required headers include [x-client-id] and [x-api-key].
  ///
  /// The [cancellationReason] parameter provides a reason for canceling the payment link.
  ///
  /// If the API call is successful (HTTP status code 200), the response data is
  /// validated against its signature. If the signature matches, the cancellation
  /// is confirmed. Otherwise, an exception is thrown indicating data integrity issues.
  ///
  /// Note: Remember to close the HTTP client after using it.
  ///
  /// Example usage:
  /// ```dart
  /// final orderId = 12345; // Replace with the actual order ID
  /// final cancellationReason = 'Payment not needed';
  /// await cancelPaymentLink(orderId, cancellationReason);
  /// print('Payment link canceled successfully.');
  /// ```
  Future<Map<String, dynamic>> cancelPaymentLink(
      int orderId, String cancellationReason) async {
    final Uri url = Uri.parse(
        "https://api-merchant.payos.vn/v2/payment-requests/$orderId/cancel");
    final http.Client client = http.Client();

    try {
      final Map<String, String> headers = {
        'Accept': 'application/json',
        'Content-type': 'application/json',
        'Charset': 'UTF-8',
        'x-client-id': clientId,
        'x-api-key': apiKey,
      };

      final http.Response response = await client.post(url,
          headers: headers,
          body: jsonEncode({'cancellationReason': cancellationReason}));

      if (response.statusCode != 200) {
        throw Exception('Call API failed!');
      } else {
        final Map<String, dynamic> res = jsonDecode(response.body);

        if (res['code'] != '00') {
          throw PayOsException(code: res['code'], message: res['desc']);
        } else {
          final String paymentLinkResSignature =
              PayOsUtils.createSignatureFromObj(res['data'], checksumKey);
          if (paymentLinkResSignature != res['signature']) {
            throw Exception(PayOsConstants.errorMessage['DATA_NOT_INTEGRITY']);
          } else {
            return res['data'];
          }
        }
      }
    } finally {
      client.close();
    }
  }
}
